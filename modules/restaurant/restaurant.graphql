# Tipo de dato para los restaurantes
type Restaurant {
  # Identificador del restaurante
  id: String
  # Calificación del restaurante
  rating: int
  # Nombre del restaurante
  name: String
  # Nombre del restaurante
  site: String
  # Correo electrónico del cliente
  email: modules.EmailScalar
  # Numero telefónico del restaurante.
  phone: modules.PhoneScalar
  # Nombre del restaurante
  street: String
  # Nombre del restaurante
  city: String
  # Nombre del restaurante
  state: String
  # Nombre del restaurante
  lat: String
  # Nombre del restaurante
  lng: String
}

# Tipo de dato para las estadisticas de los restaurantes
type StatisticsRestaurant {
  # Cantidad de restaurante que se encuentran dentro del radio.
  count: Int
  # Promedio de Calificación de los restaurante
  avg: Float
  # Desviación estandar de la calificación de los restaurantes dentro del radio.
  std: Float
}


# Lista de restaurantes
type ListRestaurants {
  # Lista de restaurantes
  data: [Restaurant]!
}

type Query {
  # Retorna los datos de un restaurante en especifico.
  getRestaurant(id: String!): Restaurant!
  # Retorna la lista de restaurantes
  restaurants: ListRestaurants!
  # Retorna estadisticas de ciertos restaurantes basado en un radio medido en metros.
  statisticsRestaurants(lat: String!, lng: String!, radius: Int!): StatisticsRestaurant!
}

type Mutation {
  # Registra un nuevo restaurante
  createRestaurant(id: String!, rating: int!, name: String!, site: String!, email: modules.EmailScalar!, phone: modules.PhoneScalar!, street: String!, city: String!, state: String!, lat: String!, lng: String! ): Restaurant!
  # Actualiza los datos de un restaurante en especifico
  updateRestaurant(id: String!, rating: int!, name: String, site: String, email: modules.EmailScalar, phone: modules.PhoneScalar, street: String, city: String, state: String, lat: String, lng: String ): Restaurant!
  # Elimina el registro de un restaurante en especifico
  deleteRestaurant(id: String!): String!
}

schema {
  query: Query
  mutation: Mutation
}
